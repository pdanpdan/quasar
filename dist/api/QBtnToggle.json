{
  "type": "component",
  "behavior": {
    "$listeners": {
      "desc": "All native events are being propagated (you don't need the '.native' modifier)"
    }
  },
  "props": {
    "ripple": {
      "type": [
        "Boolean",
        "Object"
      ],
      "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
      "default": true,
      "examples": [
        false,
        "{ center: true, color: 'teal' }"
      ]
    },
    "value": {
      "type": "Any",
      "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "examples": [
        "v-model=\"selected\""
      ]
    },
    "options": {
      "type": "Array",
      "desc": "Array of Objects defining each option",
      "definition": {
        "label": {
          "type": "String",
          "desc": "Label of option button; Use this prop and/or 'icon', but at least one is required",
          "examples": [
            "Option 1"
          ]
        },
        "icon": {
          "type": "String",
          "desc": "Icon of option button; Use this prop and/or 'label', but at least one is required",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ]
        },
        "value": {
          "type": "Any",
          "desc": "Value of the option that will be used by component model",
          "required": true
        },
        "...props": {
          "type": "Any",
          "desc": "Any other QBtn props"
        }
      },
      "examples": [
        "[ {label: 'One', value: 'one'}, {label: 'Two', value: 'two'} ]"
      ]
    },
    "color": {
      "type": "String",
      "desc": "Color name for component from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ]
    },
    "text-color": {
      "type": "String",
      "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ]
    },
    "toggle-color": {
      "type": "String",
      "desc": "Color name for component from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ],
      "default": "primary"
    },
    "toggle-text-color": {
      "type": "String",
      "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ]
    },
    "spread": {
      "type": "Boolean",
      "desc": "Spread horizontally to all available space"
    },
    "outline": {
      "type": "Boolean",
      "desc": "Use 'outline' design"
    },
    "flat": {
      "type": "Boolean",
      "desc": "Use 'flat' design"
    },
    "unelevated": {
      "type": "Boolean",
      "desc": "Remove shadow"
    },
    "rounded": {
      "type": "Boolean",
      "desc": "Applies a more prominent border-radius for a squared shape button"
    },
    "push": {
      "type": "Boolean",
      "desc": "Use 'push' design"
    },
    "glossy": {
      "type": "Boolean",
      "desc": "Applies a glossy effect"
    },
    "size": {
      "type": "String",
      "desc": "Button size name or a CSS unit including unit name",
      "examples": [
        "xs",
        "sm",
        "md",
        "lg",
        "xl",
        "25px",
        "2rem"
      ]
    },
    "no-caps": {
      "type": "Boolean",
      "desc": "Avoid turning label text into caps (which happens by default)"
    },
    "no-wrap": {
      "type": "Boolean",
      "desc": "Avoid label text wrapping"
    },
    "dense": {
      "type": "Boolean",
      "desc": "Dense mode; occupies less space"
    },
    "readonly": {
      "type": "Boolean",
      "desc": "Put component in readonly mode"
    },
    "disable": {
      "type": "Boolean",
      "desc": "Put component in disabled mode"
    },
    "stack": {
      "type": "Boolean",
      "desc": "Stack icon and label vertically instead of on same line (like it is by default)"
    },
    "stretch": {
      "type": "Boolean",
      "desc": "When used on flexbox parent, button will stretch to parent's height"
    }
  },
  "events": {
    "input": {
      "desc": "Emitted when component's model changes; Is also used by v-model",
      "params": {
        "value": {
          "type": "Any",
          "desc": "New model value",
          "required": true
        }
      }
    }
  }
}