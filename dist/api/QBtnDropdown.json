{
  "type": "component",
  "props": {
    "value": {
      "type": "Boolean",
      "desc": "Controls Menu show/hidden state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "examples": [
        "v-model=\"menuState\""
      ]
    },
    "ripple": {
      "type": [
        "Boolean",
        "Object"
      ],
      "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
      "default": true,
      "examples": [
        false,
        "{ center: true, color: 'teal' }"
      ]
    },
    "type": {
      "type": "String",
      "desc": "Define the button HTML DOM type",
      "values": [
        "a",
        "submit",
        "button",
        "reset"
      ],
      "examples": [
        ":type=\"a\" href=\"http://some-site.net\" target=\"__blank\""
      ]
    },
    "to": {
      "type": [
        "String",
        "Object"
      ],
      "desc": "Equivalent to Vue Router <router-link> 'to' property",
      "examples": [
        "/home/dashboard",
        ":to=\"{ name: 'my-route-name' }\""
      ]
    },
    "replace": {
      "type": "Boolean",
      "desc": "Equivalent to Vue Router <router-link> 'replace' property"
    },
    "label": {
      "type": [
        "String",
        "Number"
      ],
      "desc": "The text that will be shown on the button",
      "examples": [
        "Button Label"
      ]
    },
    "icon": {
      "type": "String",
      "desc": "Icon name following Quasar convention; make sure you have the icon library installed",
      "examples": [
        "map",
        "ion-add"
      ]
    },
    "icon-right": {
      "type": "String",
      "desc": "Icon name following Quasar convention; make sure you have the icon library installed",
      "examples": [
        "map",
        "ion-add"
      ]
    },
    "round": {
      "type": "Boolean",
      "desc": "Makes a circle shaped button"
    },
    "outline": {
      "type": "Boolean",
      "desc": "Use 'outline' design"
    },
    "flat": {
      "type": "Boolean",
      "desc": "Use 'flat' design"
    },
    "unelevated": {
      "type": "Boolean",
      "desc": "Remove shadow"
    },
    "rounded": {
      "type": "Boolean",
      "desc": "Applies a more prominent border-radius for a squared shape button"
    },
    "push": {
      "type": "Boolean",
      "desc": "Use 'push' design"
    },
    "glossy": {
      "type": "Boolean",
      "desc": "Applies a glossy effect"
    },
    "size": {
      "type": "String",
      "desc": "Button size name or a CSS unit including unit name",
      "examples": [
        "xs",
        "sm",
        "md",
        "lg",
        "xl",
        "25px",
        "2rem"
      ]
    },
    "fab": {
      "type": "Boolean",
      "desc": "Makes button size and shape to fit a Floating Action Button"
    },
    "fab-mini": {
      "type": "Boolean",
      "desc": "Makes button size and shape to fit a small Floating Action Button"
    },
    "color": {
      "type": "String",
      "desc": "Color name for component from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ]
    },
    "text-color": {
      "type": "String",
      "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ]
    },
    "no-caps": {
      "type": "Boolean",
      "desc": "Avoid turning label text into caps (which happens by default)"
    },
    "no-wrap": {
      "type": "Boolean",
      "desc": "Avoid label text wrapping"
    },
    "dense": {
      "type": "Boolean",
      "desc": "Dense mode; occupies less space"
    },
    "tabindex": {
      "type": [
        "Number",
        "String"
      ],
      "desc": "Tabindex HTML attribute value",
      "examples": [
        "0",
        "100"
      ]
    },
    "align": {
      "type": "String",
      "desc": "Label or content alignment",
      "default": "center",
      "values": [
        "left",
        "right",
        "center",
        "around",
        "between"
      ]
    },
    "stack": {
      "type": "Boolean",
      "desc": "Stack icon and label vertically instead of on same line (like it is by default)"
    },
    "stretch": {
      "type": "Boolean",
      "desc": "When used on flexbox parent, button will stretch to parent's height"
    },
    "loading": {
      "type": "Boolean",
      "desc": "Put button into loading state (displays a QSpinner -- can be overriden by using a 'loading' slot)"
    },
    "disable": {
      "type": "Boolean",
      "desc": "Put component in disabled mode"
    },
    "split": {
      "type": "Boolean",
      "desc": "Split dropdown icon into its own button"
    },
    "content-style": {
      "type": [
        "Array",
        "String",
        "Object"
      ],
      "desc": "Style definitions to be attributed to the menu",
      "examples": [
        "background-color: #ff0000",
        ":content-style=\"{ backgroundColor: '#ff0000' }\""
      ]
    },
    "content-class": {
      "type": [
        "Array",
        "String",
        "Object"
      ],
      "desc": "Class definitions to be attributed to the menu",
      "examples": [
        "my-special-class",
        ":content-class=\"{ 'my-special-class': <condition> }\""
      ]
    },
    "cover": {
      "type": "Boolean",
      "desc": "Allows the menu to cover the button. When used, the 'menu-self' and 'menu-fit' props are no longer effective"
    },
    "persistent": {
      "type": "Boolean",
      "desc": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key"
    },
    "auto-close": {
      "type": "Boolean",
      "desc": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap"
    },
    "menu-anchor": {
      "type": "String",
      "desc": "Two values setting the starting position or anchor point of the menu relative to its target",
      "values": [
        "top left",
        "top middle",
        "top right",
        "center left",
        "center middle",
        "center right",
        "bottom left",
        "bottom center",
        "bottom right"
      ],
      "examples": [
        "top left",
        "bottom right"
      ]
    },
    "menu-self": {
      "type": "String",
      "desc": "Two values setting the menu's own position relative to its target",
      "values": [
        "top left",
        "top middle",
        "top right",
        "center left",
        "center middle",
        "center right",
        "bottom left",
        "bottom center",
        "bottom right"
      ],
      "examples": [
        "top left",
        "bottom right"
      ]
    }
  },
  "events": {
    "input": {
      "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
      "params": {
        "value": {
          "type": "Boolean",
          "desc": "New state (showing/hidden)"
        }
      }
    },
    "show": {
      "desc": "Emitted after component has triggered show()",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true
        }
      }
    },
    "before-show": {
      "desc": "Emitted when component triggers show() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true
        }
      }
    },
    "hide": {
      "desc": "Emitted after component has triggered hide()",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true
        }
      }
    },
    "before-hide": {
      "desc": "Emitted when component triggers hide() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true
        }
      }
    },
    "click": {
      "desc": "Emitted when user clicks/taps on the main button (not the icon one, if using 'split')",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true
        }
      }
    }
  },
  "methods": {
    "show": {
      "desc": "Triggers component to show",
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object"
        }
      }
    },
    "hide": {
      "desc": "Triggers component to hide",
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object"
        }
      }
    },
    "toggle": {
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object"
        }
      },
      "desc": "Triggers component to toggle between show/hide"
    }
  },
  "slots": {
    "default": {
      "desc": "Default slot in the devland unslotted content of the component"
    }
  }
}